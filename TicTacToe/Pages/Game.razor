@using System.Diagnostics
@using TicTacToe.Components
@using TicTacToe.Models
@using TicTacToe.Services
@inject GameStateService StateService
@inject JsInteropFunctions JS

@page "/play"

<PageTitle>Play</PageTitle>

<div id="home-page">
    <img id="bg-image-tl" class="bg-image" src="Assets/Squiggle.svg" alt="Decorative squiggle"/>
    <img id="bg-image-tr" class="bg-image" src="Assets/Donut.svg" alt="Decorative circle with hole in center"/>
    <img id="bg-image-bl" class="bg-image" src="Assets/Donut.svg" alt="Decorative circle with hole in center"/>
    <img id="bg-image-br" class="bg-image" src="Assets/Squiggle.svg" alt="Decorative squiggle"/>
    <BoardGrid RepresentingBoard="StateService.State!.GameBoard"/>
</div>

    <GameOverDialog Status="StateService.State.Status"></GameOverDialog>

@code {
    private bool _stateChanged = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        StateService.State!.GameBoard.OnGameOver += OnGameStatusChange;
        StateService.State!.OnRestart += OnGameStatusChange;
    }

    private void OnGameStatusChange()
    {
        InvokeAsync(StateHasChanged);
        _stateChanged = true;
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JS.OnGameStarted();
        }

        if (_stateChanged)
        {
            //If the game is ongoing, remove the dialog
            if (StateService.State!.Status.GetType() == typeof(GameStatus.Ongoing))
            {
                JS.OnGameOver(false); 
            }
            else
            {
                JS.OnGameOver(true);
            }
            _stateChanged = false;
        }

        return base.OnAfterRenderAsync(firstRender);
    }

}