@using System.Diagnostics
@using System.Drawing
@using TicTacToe.Models
@using TicTacToe.Models.ConstantModels
@using TicTacToe.Services
@inject JsInteropFunctions JS
@inject GameConstants GameConstants
@inject GameStateService StateService

<div class="tile-container" style="grid-row: @RepresentingBoardTile.TilePosition.X; grid-column: @RepresentingBoardTile.TilePosition.Y;" @onclick="OnTileClicked">

    <div class="tile-body" id="@_tileElementId">
        <object data="@(GameConstants.SvgPaths.BlankTile)" type="image/svg+xml" class="board-tile tile-front" id="@(_tileSvgId)-front" style="pointer-events: none"></object>

        @if (RepresentingBoardTile.Claimed)
        {
            <object data="@(GameConstants.SvgPaths.GetPathFor(RepresentingBoardTile.ClaimedBy!))" type="image/svg+xml" class="board-tile tile-back" id="@(_tileSvgId)-back" style="pointer-events: none"></object>
        }
        else
        {
            <object data="@(GameConstants.SvgPaths.BlankTile)" type="image/svg+xml" class="board-tile tile-back" id="@(_tileSvgId)-back" style="pointer-events: none"></object>
        }
    </div>
</div>

@code {
    [Parameter] public required BoardTile RepresentingBoardTile { get; set; }
    private string _tileElementId { get; set; }
    private string _tileSvgId;

    //True if the svg has been updated but not yet rendered
    private bool _svgUpdated = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _tileElementId = $"{RepresentingBoardTile.TilePosition.Y}-{RepresentingBoardTile.TilePosition.X}";
        _tileSvgId = $"{_tileElementId}-svg";
        StateService.State!.OnRestart += OnGameRestart;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        /*
         * If this is the first render, or if the render will be updating the svg, register the svg
         * with js to be styled appropriately.
         */
        if (firstRender || _svgUpdated)
        {
            await JS.RegisterSvgTile($"{_tileSvgId}-front");
            await JS.RegisterSvgTile($"{_tileSvgId}-back");
            _svgUpdated = false;
        }
    }

    private void OnTileClicked()
    {
        if (RepresentingBoardTile.Claimed || StateService.State!.Status.GetType() != typeof(GameStatus.Ongoing))
            return;

        var claimingPlayer = StateService.State!.RegisterTurn();
        RepresentingBoardTile.ClaimTile(claimingPlayer);
        _svgUpdated = true;

        JS.InvokeTileFlipAnimation(_tileElementId);
    }

    private void OnGameRestart()
    {
        if (RepresentingBoardTile.Claimed)
        {
            JS.ResetTile(_tileElementId);
        }
        _svgUpdated = true;
    }

}